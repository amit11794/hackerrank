using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;



class Result
{

    /*
     * Complete the 'findMinimumEffort' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY developerSkill
     *  2. INTEGER k
     */

    public static long findMinimumEffort(List<int> developerSkill, int k)
    {
        developerSkill.Sort();
        
        List<int> members = new List<int>();
        decimal score = 0, avg = 0, distance = 0;
        
        for(int i = 0; i < k; i++)
        {
            score += developerSkill[i];            
            members.Add(developerSkill[i]);
        }        
        score /= k;
        
        if(k % 2 == 0){
            avg = (members[members.Count() / 2] + members[(members.Count() / 2) - 1]) / 2;            
        }
        else{
            avg = members[members.Count() / 2];
        }
        
        distance = Math.Abs(score - avg);
        
        
        for(int i = 0; i < developerSkill.Count() - k; i++){  
            score = 0;          
            for(int j = 0; j < k; j++)
            {
                score += developerSkill[k];                 
            }
            score /= k;
            
            if(Math.Abs(score - avg) < distance)
            {
                distance = Math.Abs(score - avg);
                members = new List<int>();
                for(int j = 0; j < k; j++)
                {            
                    members.Add(developerSkill[j]);                 
                }
            }
        }
        
        int difficulty = (int)Math.Ceiling(avg);
        
        int effort = 0;
        
        foreach(int member in members){
            effort += Math.Abs(member - difficulty);
        }
        
        return effort;
    }
}

class Solution
{
    public static void Main(string[] args)
    {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int developerSkillCount = Convert.ToInt32(Console.ReadLine().Trim());

        List<int> developerSkill = new List<int>();

        for (int i = 0; i < developerSkillCount; i++)
        {
            int developerSkillItem = Convert.ToInt32(Console.ReadLine().Trim());
            developerSkill.Add(developerSkillItem);
        }

        int k = Convert.ToInt32(Console.ReadLine().Trim());

        long result = Result.findMinimumEffort(developerSkill, k);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
